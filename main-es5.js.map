{"version":3,"sources":["webpack:///src/app/services/error-interceptor.ts","webpack:///src/app/services/login.guard.ts","webpack:///src/environments/environment.ts","webpack:///src/app/services/login.service.ts","webpack:///src/app/services/common.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/services/pages.guard.ts","webpack:///src/app/app.module.ts","webpack:///src/app/services/config.service.ts","webpack:///src/app/services/chat.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["TOKEN_HEADER_KEY","ErrorInterceptor","router","loginService","signalRService","CommonService","isRefreshing","refreshTokenSubject","request","next","token","getData","addToken","handle","pipe","error","status","handle401Error","clone","setHeaders","obj","userID","refreshToken","console","log","result","setData","accessToken","removeFromGroup","clearStorage","navigate","err","redirect","customerID","logout","subscribe","res","LoginGuard","route","state","isAuthenticated","environment","production","API_URL","CAMPAIGN_STATS_INTERVAL","LoginService","http","headers","user","post","handleError","data","message","key","val","sessionStorage","clear","AppComponent","title","PagesGuard","initConfig","config","loadConfig","AppModule","provide","useFactory","deps","multi","useClass","appConfig","ConfigService","get","toPromise","then","SignalRService","startConnection","groupName","JSON","parse","userName","hubConnection","withUrl","skipNegotiation","transport","WebSockets","build","start","getConnectionId","addToGroup","invoke","name","responseType","routes","path","canActivate","loadChildren","m","AuthModule","PagesModule","AppRoutingModule","forRoot","onSameUrlNavigation","loadConfigService","configService","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","e","Error","code","keys","module","exports","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { LoginService } from './login.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS, HttpEvent, HttpErrorResponse, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\r\nimport { SignalRService } from './chat.service';\r\nimport { CommonService } from './common.service';\r\n\r\nconst TOKEN_HEADER_KEY = 'x-access-token';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n  constructor(private router: Router, private loginService: LoginService, private signalRService: SignalRService, private CommonService: CommonService) { }\r\n\r\n  private isRefreshing = false;\r\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    let token = this.CommonService.getData('accessToken') || 'undefined';\r\n\r\n    if (token !== 'undefined') {\r\n      request = this.addToken(request, token);\r\n    }\r\n\r\n    return next.handle(request)\r\n      .pipe(\r\n        catchError(error => {\r\n          if (error instanceof HttpErrorResponse && error.status === 401) {\r\n            return this.handle401Error(request, next);\r\n          } else {\r\n            return throwError(error);\r\n          }\r\n        }\r\n        )\r\n      );\r\n  }\r\n\r\n  private addToken(request: HttpRequest<any>, token: string) {\r\n    return request.clone({\r\n      setHeaders: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    // request = request.clone({\r\n    //   setHeaders: { Authorization: `Bearer ${token}` }\r\n    // });\r\n  }\r\n\r\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\r\n    if (!this.isRefreshing) {\r\n      this.isRefreshing = true;\r\n      this.refreshTokenSubject.next(null);\r\n      let obj = {\r\n        userID: this.CommonService.getData('userID'),\r\n        refreshToken: this.CommonService.getData('refreshToken')\r\n      }\r\n      console.log(\"Refresh Token Request\", obj);\r\n\r\n      return this.loginService.refreshToken(obj).pipe(\r\n        switchMap((token: any) => {\r\n          console.log(\"Refresh Token Response\", token);\r\n\r\n          this.isRefreshing = false;\r\n          if (token.result === 'Success') {\r\n            this.CommonService.setData('accessToken', token.accessToken)\r\n            this.refreshTokenSubject.next(token.accessToken);\r\n            // return next.handle(this.addToken(request, token.accessToken));\r\n          }\r\n          else {\r\n            console.log(\"Else\")\r\n            this.signalRService.removeFromGroup()\r\n            this.CommonService.clearStorage()\r\n            this.router.navigate(['/']);\r\n            //this.loginService.redirect();\r\n            //return throwError(token.message);\r\n          }\r\n          return next.handle(this.addToken(request, token.accessToken));\r\n        }),\r\n        catchError((err) => {\r\n          console.log(\"catch Error\")\r\n          this.CommonService.clearStorage()\r\n          this.router.navigate(['/']);\r\n          this.isRefreshing = false;\r\n          this.signalRService.removeFromGroup()\r\n          this.loginService.redirect();\r\n          return throwError(err);\r\n        })\r\n\r\n\r\n      );\r\n    }\r\n\r\n    return this.refreshTokenSubject.pipe(\r\n      filter(token => token != null),\r\n      take(1),\r\n      switchMap(token => {\r\n        console.log(\"Refresh Token 1\", token);\r\n        return next.handle(this.addToken(request, token));\r\n      }));\r\n  }\r\n\r\n  private logOut() {\r\n\r\n    var obj = {\r\n      customerID: this.CommonService.getData('customerID'),\r\n      userID: this.CommonService.getData('userID'),\r\n    }\r\n    this.loginService.logout(obj).subscribe((res) => {\r\n      this.signalRService.removeFromGroup()\r\n      this.loginService.redirect();\r\n    }, (err) => {\r\n      console.log(err)\r\n    })\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { LoginService } from './login.service';\r\nimport { Router } from '@angular/router';\r\nimport { CommonService } from './common.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginGuard implements CanActivate {\r\n  constructor(private CommonService: CommonService, private router: Router) { }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    if (this.CommonService.isAuthenticated()) {\r\n      this.router.navigate(['/pages'])\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  \r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  API_URL: 'https://nmbservice.spitfireagent.com/DialServiceAPI',\r\n  //appConfig.API_URL: 'http://localhost:62188',\r\n  CAMPAIGN_STATS_INTERVAL: 10000\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { API_URL } from '../constants/constants';\r\nimport { appConfig } from \"./../services/config.service\";\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { retry, catchError } from 'rxjs/operators';\r\nimport { EMPTY, of } from \"rxjs\";\r\nimport { CommonService } from './common.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class LoginService {\r\n\r\n  constructor(private http: HttpClient, private router: Router, private CommonService: CommonService) { }\r\n\r\n  private headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n\r\n  login(user: any): Observable<any> {\r\n    return this.http.post<any>(appConfig.API_URL + '/api/Login/LoginUser', user, { headers: this.headers }).pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  refreshToken(data: any): Observable<any> {\r\n    return this.http.post<any>(appConfig.API_URL + '/api/Login/RefreshToken', data, { headers: this.headers }).pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  registerClient(data: any): Observable<any> {\r\n    return this.http.post<any>(appConfig.API_URL + '/api/DialService/RegisterClient', data, { headers: this.headers }).pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  registerSupervisor(data: any): Observable<any> {\r\n    return this.http.post<any>(appConfig.API_URL + '/api/DialService/RegisterSupervisor', data, { headers: this.headers }).pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getSecretQuestion(data: any): Observable<any> {\r\n    return this.http.post<any>(appConfig.API_URL + '/api/Login/GetSecretQuestion', data, { headers: this.headers }).pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  verifySecretAnswer(data: any): Observable<any> {\r\n    return this.http.post<any>(appConfig.API_URL + '/api/Login/verifySecretAnswer', data, { headers: this.headers }).pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  logout(data: any): Observable<any> {\r\n    return this.http.post<any>(appConfig.API_URL + '/api/Login/LogoutUser', data, { headers: this.headers }).pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    )\r\n  }\r\n\r\n  redirect() {\r\n    this.CommonService.clearStorage();\r\n    this.router.navigate(['/']);\r\n  }\r\n  \r\n  gotoNotFound() {\r\n    this.router.navigate(['/403']);\r\n  }\r\n\r\n  handleError(error: any) {\r\n    return throwError(error.message || error);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class CommonService {\r\n\r\n  constructor() { }\r\n\r\n  setData(key: any, val: any): void {\r\n    sessionStorage[key] = val;\r\n  }\r\n\r\n  getData(key: any): any {\r\n    return sessionStorage[key];\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return sessionStorage.userID != null;\r\n  }\r\n\r\n  clearStorage(){\r\n    sessionStorage.clear();\r\n  }\r\n\r\n}","import { Component } from '@angular/core';\r\nimport { CommonService } from 'src/app/services/common.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  template: `<router-outlet></router-outlet>`,\r\n  styles: []\r\n})\r\nexport class AppComponent {\r\n  title = 'SpitFire';\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { LoginService } from './login.service';\r\nimport { CommonService } from './common.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PagesGuard implements CanActivate {\r\n  constructor(private loginService: LoginService, private CommonService: CommonService) { }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    if (!this.CommonService.isAuthenticated()) {\r\n \r\n      this.loginService.redirect();\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  \r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonService } from 'src/app/services/common.service';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { ErrorInterceptor } from './services/error-interceptor';\r\n\r\nimport { APP_INITIALIZER } from '@angular/core';\r\nimport { ConfigService } from './services/config.service';\r\n\r\nfunction initConfig(config: ConfigService) {\r\n  return () => config.loadConfig()\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [\r\n    ConfigService,\r\n    { provide: APP_INITIALIZER, useFactory: initConfig, deps: [ConfigService], multi: true },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: ErrorInterceptor,\r\n      multi: true\r\n    },\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport let appConfig: any\r\n\r\n@Injectable()\r\n\r\nexport class ConfigService {\r\n\r\n  // public config: any;\r\n  \r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  loadConfig(){\r\n    return this.http.get(\"./assets/config.json\")\r\n    .toPromise()\r\n    .then(res => {\r\n      appConfig = res\r\n      console.log(appConfig.API_URL, \"From Config\");\r\n    })\r\n  }\r\n\r\n  getConfig(){\r\n    return appConfig\r\n  }\r\n  \r\n  // loadJSON(filePath: any) {\r\n  //   const json = this.loadTextFileAjaxSync(filePath, \"application/json\");\r\n  //   return json;\r\n  // }\r\n\r\n  // loadTextFileAjaxSync(filePath: any, mimeType: any) {\r\n  //   const xmlhttp = new XMLHttpRequest();\r\n  //   xmlhttp.open(\"GET\", filePath, false);\r\n  //   if (mimeType != null) {\r\n  //     if (xmlhttp.overrideMimeType) {\r\n  //       xmlhttp.overrideMimeType(mimeType);\r\n  //     }\r\n  //   }\r\n  //   xmlhttp.send();\r\n  //   if (xmlhttp.status == 200) {\r\n  //     return xmlhttp.responseText;\r\n  //   }\r\n  //   else {\r\n  //     return null;\r\n  //   }\r\n  // }\r\n\r\n  // public getJSON(): Observable<any> {\r\n  //   return this.http.get(\"./assets/config.json\");\r\n  // }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as signalR from \"@aspnet/signalr\"; // or from \"@microsoft/signalr\" if you are using a new library\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { API_URL } from '../constants/constants';\r\nimport { appConfig } from \"./../services/config.service\";\r\nimport { retry, catchError } from 'rxjs/operators';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { CommonService } from './common.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class SignalRService {\r\n  \r\n  constructor(private http: HttpClient, private CommonService: CommonService) { }\r\n\r\n  private headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n\r\n  public data!: any[];\r\n  public connectionId: any;\r\n  public hubConnection!: signalR.HubConnection\r\n  public groupName: any;\r\n\r\n  \r\n\r\n  startConnection = () => {\r\n    this.groupName = JSON.parse(this.CommonService.getData('user')).userName;\r\n    //this.groupName = this.CommonService.getData('userID');\r\n    this.hubConnection = new signalR.HubConnectionBuilder()\r\n      .withUrl(appConfig.API_URL + '/chatsocket', {\r\n        skipNegotiation: true,\r\n        transport: signalR.HttpTransportType.WebSockets\r\n      })\r\n      .build();\r\n    \r\n    this.hubConnection\r\n      .start()\r\n      .then(() => console.log('Connection started'))\r\n      .then(() => this.getConnectionId())\r\n      .then(() => this.addToGroup(this.groupName))\r\n      .catch((err: string) => console.log( err, appConfig.API_URL + '/chatsocket'))\r\n  }\r\n\r\n  addToGroup = (groupName: any) => {\r\n    this.hubConnection.invoke('AddToGroup', groupName).then(() => {\r\n      console.log(\"AddToGroup\", groupName)})\r\n      .catch((err: string) => console.log(\"AddToGroup Error\", err))\r\n  }\r\n\r\n  //Called Directly from the Page.ts\r\n/*   public receiveManagerMessageListener = () => {\r\n    this.hubConnection.on('ReceiveManagerMessage', (data: any[]) => {\r\n      this.data = data;\r\n      console.log(data);\r\n    });\r\n  } */\r\n\r\n  getConnectionId = () => {\r\n    this.hubConnection.invoke('getconnectionid').then(\r\n      (data) => {\r\n        console.log(\"ConnectionId\" , data);\r\n      })\r\n  }\r\n\r\n  removeFromGroup = () => {\r\n    if (this.hubConnection) {  \r\n      console.log(\"RemoveFromALLGroup\")\r\n       this.hubConnection.invoke('RemoveFromALLGroup', JSON.parse(this.CommonService.getData('user')).userName)\r\n        .catch((err: string) => console.log(\"RemoveAllFromGroup Error\", err))\r\n    }\r\n  }\r\n\r\n  getAllAgent(): Observable<any> {\r\n    return this.http.get<any>(appConfig.API_URL + '/api/Agent/GetAllAgents', { headers: this.headers })\r\n      .pipe(\r\n        retry(1),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getAllManagers(): Observable<any> {\r\n    return this.http.get<any>(appConfig.API_URL + '/api/Users/GetAllManagers', { headers: this.headers })\r\n      .pipe(\r\n        retry(1),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  sendChatMessage(data: any): Observable<any> {\r\n    return this.http.post<any>(appConfig.API_URL + '/api/Chat/SendChatMessage', data, { headers: this.headers })\r\n      .pipe(\r\n        retry(1),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getImage(name: string): Observable<any> {\r\n    return this.http.get(appConfig.API_URL + '/api/FileUpload/GetImage/' + name, { responseType: \"blob\" })\r\n      .pipe(\r\n        retry(1),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  handleError(error: any) {\r\n    return throwError(error.message || error);\r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonService } from 'src/app/services/common.service';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginGuard } from './services/login.guard';\r\nimport { PagesGuard } from './services/pages.guard';\r\n\r\nconst routes: Routes = [\r\n  { path: '', canActivate: [LoginGuard], loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule) },\r\n  { path: 'pages', canActivate: [PagesGuard], loadChildren: () => import('./pages/pages.module').then(m => m.PagesModule) }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { onSameUrlNavigation: 'reload' })],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { CommonService } from 'src/app/services/common.service';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\nimport { ConfigService } from './app/services/config.service';\r\n\r\nexport function loadConfigService(configService: ConfigService): Function {\r\n  return () => { return configService.loadConfig() };\r\n}\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n\r\n\r\n\r\n// (async () => {\r\n//   const response = await fetch('https://api.myjson.com/bins/lf0ns');\r\n//   const config = await response.json();\r\n\r\n//   environment['appConfig.API_URL'] = \"holyshit\";\r\n\r\n//   platformBrowserDynamic().bootstrapModule(AppModule)\r\n//     .catch(err => console.error(err));\r\n// })();","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}